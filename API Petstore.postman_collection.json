{
	"info": {
		"_postman_id": "94d04168-2dbd-4e5b-a91e-aefa94c1d865",
		"name": "API Petstore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24878696"
	},
	"item": [
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"username_1\", pm.iterationData.get(\"username_1\"))\r",
							"console.log(pm.collectionVariables.get('username_1'))\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Save ID User_1 to a variable\", function () {\r",
							"   var jsonData = JSON.parse(responseBody);\r",
							"   pm.collectionVariables.set(\"user_id1\",jsonData.message);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);\r",
							"console.log(\"Time: \" + pm.response.responseTime);\r",
							"console.log(\"SizeBody: \" + pm.response.responseSize);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"{{username_1}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user (invalid_body)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"POST/create user: negative\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<user>\r\n     <id>0</id>\r\n     <username>Ivan</username>\r\n     <firstName>Ivan</firstName>\r\n     <lastName>Petrov</lastName>\r\n     <email>fhsk76@hj.ji</email>\r\n     <password>2gk86shf8</password>\r\n     <phone>21238</phone>\r\n     <userStatus>1</userStatus>\r\n</user>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user (no body)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user (invalid_method)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Method request: \" + pm.request.method);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"{{username_1}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type has the value application/json\", function(){\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Keys in the response\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.expect(jsonData).to.have.keys(\"id\", \"username\", \"firstName\", \"lastName\", \"email\", \"password\", \"phone\", \"userStatus\");\r",
							"});\r",
							"\r",
							"pm.test(\"User_name1 is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_1\"));\r",
							"});\r",
							"\r",
							"pm.test(\"User_id1 is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"user_id1\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Save password User_1 to a variable\", function () {\r",
							"    let jsonData = JSON.parse(responseBody);\r",
							"    pm.collectionVariables.set(\"password_1\", jsonData.password)\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get('username_1'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 (invalid_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"GET/get user: negative\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{invalid_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 (no_user)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message Not found is contained in the response\", function () {\r",
							"    let message = \"User not found\"\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.expect(message).to.eql(jsonData.message);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{no_user}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 (no_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 (invalid_method)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Method request: \" + pm.request.method);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new users (array)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"username_2\", pm.iterationData.get(\"username_2\"))\r",
							"pm.collectionVariables.set(\"username_3\", pm.iterationData.get(\"username_3\"))\r",
							"console.log(pm.collectionVariables.get('username_2'))\r",
							"console.log(pm.collectionVariables.get('username_3'))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);\r",
							"console.log(\"Time: \" + pm.response.responseTime);\r",
							"console.log(\"SizeBody: \" + pm.response.responseSize);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"{{username_2}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"userStatus\": 2\r\n  },\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"{{username_3}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"userStatus\": 3\r\n  }  \r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/createWithArray",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"createWithArray"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new users array (invalid_body)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"POST/create user array: negative\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<user1>\r\n     <id>0</id>\r\n     <username>Ivan</username>\r\n     <firstName>Ivan</firstName>\r\n     <lastName>Petrov</lastName>\r\n     <email>fhsk76@hj.ji</email>\r\n     <password>2gk86shf8</password>\r\n     <phone>21238</phone>\r\n     <userStatus>1</userStatus>\r\n</user1>\r\n<user2>\r\n     <id>0</id>\r\n     <username>Petr</username>\r\n     <firstName>Petr</firstName>\r\n     <lastName>Ivanov</lastName>\r\n     <email>fhsk76@hj.ji</email>\r\n     <password>2gk86shf8</password>\r\n     <phone>21238</phone>\r\n     <userStatus>1</userStatus>\r\n</user2>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/createWithArray",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"createWithArray"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new users array (no_body)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/createWithArray",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"createWithArray"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new users array (invalid_method)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Method request: \" + pm.request.method);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"{{username_2}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"userStatus\": 2\r\n  },\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"{{username_3}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"userStatus\": 3\r\n  }  \r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/createWithArray",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"createWithArray"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User_name1 is not contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"username_1\"));\r",
							"});\r",
							"\r",
							"pm.test(\"User_name2 is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_2\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Save ID User_2 to a variable\", function () {\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"user_id2\",jsonData.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Save password User_2 to a variable\", function () {\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"password_2\", jsonData.password)\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get('username_2'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User_name3 is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_3\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Save ID User_3 to a variable\", function () {\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"user_id3\",jsonData.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Save password User_3 to a variable\", function () {\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"password_3\", jsonData.password)\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get('username_3'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type has the value application/json\", function(){\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Message User session is contained in the response\", function () {\r",
							"    let message = \"logged in user session\"\r",
							"    pm.expect(pm.response.text()).to.include(message);\r",
							"});\r",
							"\r",
							"pm.test(\"New Headers is contained in the response\", function(){\r",
							"    pm.response.headers.has('X-Expires-After','X-Rate-Limit');\r",
							"});\r",
							"\r",
							"console.log(\"Headers response: \" + pm.response.headers);\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"GET/login\" + pm.collectionVariables.get(\"username_1\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/login?username={{username_1}}&password={{password_1}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username_1}}"
						},
						{
							"key": "password",
							"value": "{{password_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 login (invalid_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"GET/login: negative\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/login?username={{username_3}}&password={{password_1}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username_3}}"
						},
						{
							"key": "password",
							"value": "{{password_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 login (invalid_password)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/login?username={{username_1}}&password={{password_3}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username_1}}"
						},
						{
							"key": "password",
							"value": "{{password_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"GET/logout\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get logout (invalid_method)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"GET/logout: negative\")\r",
							"console.log(\"Method request: \" + pm.request.method);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User_id3 is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"user_id3\"));\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"username_3_new\", pm.iterationData.get(\"username_3_new\"))\r",
							"console.log(\"username_3 = \" + pm.collectionVariables.get('username_3'))\r",
							"console.log(\"username_3_new = \" + pm.collectionVariables.get('username_3_new'))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{user_id3}},\r\n  \"username\": \"{{username_3_new}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password_3}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3 (invalid_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"PUT/update user: negative\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{user_id3}},\r\n  \"username\": \"{{username_3_new}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password_3}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{invalid_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3 (no_user)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"{{username_3_new}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password_3}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{no_user}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3 (no_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{user_id3}},\r\n  \"username\": \"{{username_3_new}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password_3}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3 (invalid_body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<user>\r\n     <id>0</id>\r\n     <username>Ivan</username>\r\n     <firstName>Ivan</firstName>\r\n     <lastName>Petrov</lastName>\r\n     <email>fhsk76@hj.ji</email>\r\n     <password>2gk86shf8</password>\r\n     <phone>21238</phone>\r\n     <userStatus>1</userStatus>\r\n</user>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3 (no_body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User 3 (invalid_method)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Method request: \" + pm.request.method);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{user_id3}},\r\n  \"username\": \"{{username_3_new}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password_3}}\",\r\n  \"phone\": \"{{$randomPhoneNumber}}\",\r\n  \"userStatus\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 3 New",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Username_3_new is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_3_new\"));\r",
							"});\r",
							"\r",
							"pm.test(\"User_id3 is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"user_id3\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Save Username_3_new to a variable\", function () {\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.collectionVariables.set(\"username_3\",jsonData.username);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get('username_3_new'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3_new}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User name of deleted is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_1\"));\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"user_id1\", null)\r",
							"pm.collectionVariables.set(\"password_1\", null)\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Delete user: \" + pm.collectionVariables.get(\"username_1\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 1 (invalid_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Delete user: negative\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{invalid_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 1 (no_name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 1 (no_user)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{no_user}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 1  (invalid_method)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200\", function () {\r",
							"    pm.response.to.not.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Method request: \" + pm.request.method);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 1 after Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message Not found is contained in the response\", function () {\r",
							"    let message = \"User not found\"\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.expect(message).to.eql(jsonData.message);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"username_1\", null)\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Get User Delete: \" + pm.collectionVariables.get(\"username_1\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User name of deleted is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_2\"));\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"user_id2\", null)\r",
							"pm.collectionVariables.set(\"password_2\", null)\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Delete user: \" + pm.collectionVariables.get(\"username_2\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 2 after Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message Not found is contained in the response\", function () {\r",
							"    let message = \"User not found\"\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.expect(message).to.eql(jsonData.message);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"username_2\", null)\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Get User Delete: \" + pm.collectionVariables.get(\"username_2\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User name of deleted is contained in the response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"username_3\"));\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"user_id3\", null)\r",
							"pm.collectionVariables.set(\"password_3\", null)\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Delete user: \" + pm.collectionVariables.get(\"username_3\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 3 after Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message Not found is contained in the response\", function () {\r",
							"    let message = \"User not found\"\r",
							"    let jsonData = JSON.parse(responseBody)\r",
							"    pm.expect(message).to.eql(jsonData.message);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"username_3\", null)\r",
							"pm.collectionVariables.set(\"username_3_new\", null)\r",
							"console.log(\"Code: \" + pm.response.code);\r",
							"console.log(\"Status: \" + pm.response.status);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Get User Delete: \" + pm.collectionVariables.get(\"username_3\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/:username",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						":username"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username_3}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "username_1",
			"value": "",
			"type": "string"
		},
		{
			"key": "username_2",
			"value": "",
			"type": "string"
		},
		{
			"key": "username_3",
			"value": "",
			"type": "string"
		},
		{
			"key": "username_3_new",
			"value": "",
			"type": "string"
		},
		{
			"key": "password_1",
			"value": "",
			"type": "string"
		},
		{
			"key": "password_2",
			"value": "",
			"type": "string"
		},
		{
			"key": "password_3",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id1",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id2",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id3",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalid_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "no_user",
			"value": "",
			"type": "string"
		}
	]
}